<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-name" content="mono" />

    <title>Mono - Responsive Admin & Dashboard Template</title>

    <!-- GOOGLE FONTS -->
    <link href="https://fonts.googleapis.com/css?family=Karla:400,700|Roboto" rel="stylesheet">
    <link href="~/plugins/material/css/materialdesignicons.min.css" rel="stylesheet" />
    <link href="~/plugins/simplebar/simplebar.css" rel="stylesheet" />

    <!-- PLUGINS CSS STYLE -->
    <link href="~/plugins/nprogress/nprogress.css" rel="stylesheet" />

    <link href="~/plugins/DataTables/DataTables-1.10.18/css/jquery.dataTables.min.css" rel="stylesheet" />

    <link href="~/plugins/jvectormap/jquery-jvectormap-2.0.3.css" rel="stylesheet" />

    <link href="~/plugins/daterangepicker/daterangepicker.css" rel="stylesheet" />

    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

    <link href="~/plugins/toaster/toastr.min.css" rel="stylesheet" />

    <!-- MONO CSS -->
    <link id="main-css-href" rel="stylesheet" href="~/css/style.css" />

    <!-- FAVICON -->
    <link href="~/images/favicon.png" rel="shortcut icon" />

    <!--
      HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries
    -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script src="~/plugins/nprogress/nprogress.js"></script>
</head>


<body class="navbar-fixed sidebar-fixed" id="body">
    <script>
        NProgress.configure({ showSpinner: false });
        NProgress.start();
    </script>


    <div id="toaster"></div>


    <!-- ====================================
    ——— WRAPPER
    ===================================== -->
    <div class="wrapper">


        <!-- ====================================
          ——— LEFT SIDEBAR WITH OUT FOOTER
        ===================================== -->
        <aside class="left-sidebar sidebar-dark" id="left-sidebar">
            <div id="sidebar" class="sidebar sidebar-with-footer">
                <!-- Aplication Brand -->
                <div class="app-brand">
                    <a href="@Url.Action("Privacy", "Home")">
                        @* <img src="Images/Logo.png"> *@
                        <span class="brand-name">RG Advisory Group</span>


                    </a>
                </div>
                <!-- begin sidebar scrollbar -->
                <div class="sidebar-left" data-simplebar style="height: 100%;">
                    <!-- sidebar menu -->
                    <ul class="nav sidebar-inner" id="sidebar-menu">

                        <li>
                            <a class="sidenav-item-link" href="@Url.Action("Asientos", "Home")">
                                <i class="mdi mdi-home-circle"></i>
                                <span class="nav-text">Principal</span>
                            </a>
                        </li>

                        <li>
                            <a class="sidenav-item-link" href="@Url.Action("Colaboradores", "Home")">
                                <i class="mdi mdi-briefcase-account-outline"></i>
                                <span class="nav-text">Colaboradores</span>
                            </a>
                        </li>


                        <li>
                            <a class="sidenav-item-link" href="@Url.Action("Metricas", "Home")">
                                <i class="mdi mdi-chart-line"></i>
                                <span class="nav-text">Métricas</span>
                            </a>
                        </li>

                        <li class="section-title">
                            Funciones
                        </li>



                        <li>
                            <a class="sidenav-item-link" href="@Url.Action("Cliente", "Home")">
                                <i class="mdi mdi-account"></i>
                                <span class="nav-text">Clientes</span>
                            </a>
                        </li>


                        <li class="has-sub">
                            <a class="sidenav-item-link" href="javascript:void(0)" data-toggle="collapse" data-target="#email"
                               aria-expanded="false" aria-controls="emai>
                                <i class="mdi mdi-email"></i>
                                <i class="mdi mdi-square-edit-outline"></i>
                                <span class="nav-text">Asiento</span><b class="caret"></b>
                            </a>

                            <ul class="collapse" id="email"
                                data-parent="#sidebar-menu">
                                <div class="sub-menu">


                                <li class="active">
                                    <a class="sidenav-item-link" href="@Url.Action("Nuevo", "Home")">
                                        <span class="nav-text">Crear</span>

                                    </a>
                                </li>

                                <li>
                                    <a class="sidenav-item-link" href="@Url.Action("Editar", "Home")">
                                        <span class="nav-text">Editar</span>

                                    </a>
                                </li>

                                <li>
                                    <a class="sidenav-item-link" href="@Url.Action("Eliminar", "Home")">
                                        <span class="nav-text">Eliminar</span>

                                    </a>

                </div>
                </ul>
                </li>


                <li>
                    <a class="sidenav-item-link" href="@Url.Action("Reportes", "Home")">
                        <i class="mdi mdi-folder-outline"></i>
                        <span class="nav-text">Reportes</span>
                    </a>
                </li>



                <li>
                    <a class="sidenav-item-link" href="@Url.Action("Cuentas", "Home")">
                        <i class="mdi mdi-file-multiple"></i>
                        <span class="nav-text">Catálogo De Cuentas</span>
                    </a>
                </li>




            </div>

            <div class="sidebar-footer">
                <div class="sidebar-footer-content">
                </div>
            </div>
    </div>
    </aside>



    <!-- ====================================
    ——— PAGE WRAPPER
    ===================================== -->
    <div class="page-wrapper">

        <!-- Header -->
        <header class="main-header" id="header">
            <nav class="navbar navbar-expand-lg navbar-light" id="navbar">
                <!-- Sidebar toggle button -->
                <button id="sidebar-toggler" class="sidebar-toggle">
                    <span class="sr-only">Toggle navigation</span>
                </button>

                <span class="page-title">Crear Asiento</span>

                <div class="navbar-right ">

                    <!-- search form -->

                    <form action="index.html" method="get">
                        <div class="input-group input-group-sm" id="input-group-search">

                            <div class="input-group-append">
                            </div>

                    </form>
                    <ul class="dropdown-menu dropdown-menu-search">

                        <li class="nav-item">
                            <a class="nav-link" href="index.html">Morbi leo risus</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="index.html">Dapibus ac facilisis in</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="index.html">Porta ac consectetur ac</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="index.html">Vestibulum at eros</a>
                        </li>

                    </ul>

                </div>

                <ul class="nav navbar-nav">

                    <!-- User Account -->
                 

                            <li class="dropdown-footer">
                                <a class="dropdown-link-item" href="@Url.Action("Index", "Home")"> <i class="mdi mdi-logout"></i> Salir </a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </nav>
        </header>




        <!-- ====================================
        ——— CONTENT WRAPPER
        ===================================== -->
        <!-- Cuentas -->
        <div class="card card-default">
           
            <div class="card-body">

                

                    <form>
                        <div class="form-group">
                            <label for="exampleFormControlInput4">Fecha</label>
                            <input type="text" id="reference" class="form-control" placeholder="" required>
                        </div>


                        <div class="form-group">
                            <label for="exampleFormControlInput1">currency</label>
                            <select class="form-control" id="currency">
                                   <option value="USD">USD</option>
                                   <option value="CRC">CRC</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="exampleFormControlInput4">Tipo de cambio</label>
                            <input type="text" id="reference" class="form-control" placeholder="" required>
                        </div>

                        <div class="form-group">
                            <label for="exampleFormControlInput4">Referencia</label>
                            <input type="text" id="reference" class="form-control" placeholder="" required>
                        </div>
                      <a class="btn btn-primary" href="@Url.Action("Nuevo2", "Home")">Crear</a>
                    </form>


                    <br></br>
                    <br></br>
                   <!--  <table class="table table-striped">
                            <thead>
                                <tr>
                                    
                                   <th>Codigo asiento</th>
                                    <th>Creation Date</th>
                                    <th>Currency</th>
                                    <th>Seat Value</th>
                                    <th>Customer ID</th>
                                    <th>Reference</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="tableBody"> -->
                                <!-- Aquí se agregarán las filas desde JavaScript -->
                            </tbody>
                    <!--  </table>
                    <br></br>
                    <br></br>
                        <div class="form-group">
                            <H1>Eliminar</H1>
                            <select class="form-control" id="delete_seat" name="seat">
                            </select>
                        </div>
                        <button type="button" class="btn btn-danger" id="delete_seat_button">Eliminar</button>
                        <br></br>  -->
                    <br></br>
                        <!-- Botón para abrir el modal de actualización -->
                      <!--    <div class="form-group">
                            <H1>Actualizar</H1>
                            <select class="form-control" id="update_seat" name="seat">
                            </select>
                        </div>  -->

<!-- Modal para actualizar el asiento -->
 <!-- <div class="modal fade" id="updateModal" tabindex="-1" role="dialog" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateModalLabel">Actualizar Asiento</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="updateForm">
                    <div class="form-group">
                            <label for="currency">Currency</label>
                            <select class="form-control" id="currency_Upd">
                                   <option value="USD">USD</option>
                                   <option value="CRC">CRC</option>
                            </select>
                        </div>
                    <div class="form-group">
                        <label for="seatValue">Seat Value</label>
                        <input type="text" class="form-control" id="seatValue_Upd" name="seatValue" readonly>
                    </div>
                    <div class="form-group">
                        <label for="customer">Customer</label>
                        <select class="form-control" id="customer_Upd" name="customer">  -->
                            <!-- Opciones de clientes se cargarán dinámicamente con JavaScript -->
                      <!--    </select>
                    </div>
                    <div class="form-group">
                        <label for="reference">Reference</label>
                        <input type="text" class="form-control" id="reference_Upd" placeholder="Reference">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" onclick="updateSeat()">Actualizar</button>
            </div>
        </div>
    </div>
</div>

            </div>


            <div class="modal fade" id="accountingModal">
    <div class="modal-dialog">
        <div class="modal-content">  -->

            <!-- Modal Header -->
         <!--     <div class="modal-header">
                <h4 class="modal-title">Ingresar Registro de Contabilidad</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>  -->

            <!-- Modal body -->
     <!--         <div class="modal-body">
                <form id="accountingForm">
                    <div class="form-group">
                        <label for="monto">Monto:</label>
                        <input type="number" class="form-control" id="monto" name="monto">
                    </div>
                    <div class="form-group">
                            <label for="currency">Currency</label>
                            <select class="form-control" id="currency">
                                   <option value="USD">USD</option>
                                   <option value="CRC">CRC</option>
                            </select>
                    </div>
                    <div class="form-group">
                            <label for="idCuenta">Cuenta</label>
                            <select class="form-control" id="idCuenta">
                            </select>
                    </div>
                    <div class="form-group">
                        <label for="descripcion">Descripción:</label>
                        <input type="text" class="form-control" id="descripcion" name="descripcion">
                    </div>
                    <div class="form-group">
                        <label for="idAsiento">ID de Asiento:</label>
                        <input type="text" class="form-control" id="idAsiento" name="idAsiento" readonly>
                    </div>
                </form>
            </div>  -->

            <!-- Modal footer -->
         <!--     <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" onclick="insertRecord()">Insertar</button>
            </div>
        </div>
    </div>
</div>

<script> 


    function insertRecord() {  -->
 <!--   // Obtener los valores de los campos
    var monto = $("#monto").val();
    var currency = $("#currency").val();
    var idCuenta = $("#idCuenta").val();
    var descripcion = $("#descripcion").val();
    var idAsiento = $("#idAsiento").val();  -->

  <!--  // Verificar si alguno de los campos está vacío
    if (monto === "" || currency === "" || idCuenta === "" || descripcion === "" || idAsiento === "") {  -->
   <!--     // Mostrar un mensaje de error o realizar alguna acción si hay campos vacíos
        alert("Por favor, complete todos los campos.");
        return;  --><!--// No continuar con la solicitud AJAX
    }

    // Si todos los campos tienen datos, crear un objeto con los datos a enviar
    var data = {
        monto: monto,
        currency: currency,
        idCuenta: idCuenta,
        descripcion: descripcion,
        idAsiento: idAsiento
    };  -->

  <!--  // Realizar la solicitud AJAX
    $.ajax({
        type: "POST",
        url: "/AccountingTable/InsertAccountingRecord", // Reemplaza con la ruta correcta de tu controlador
        data: data,
        success: function (response) {  -->
       <!--     // Manejar la respuesta del servidor si es necesario
            console.log(response);
            // Cerrar el modal
            $("#accountingModal").modal("hide");
            alert("si");
        },
        error: function (error) {
            // Manejar errores si es necesario
            alert("no");
            console.log(error);
        }
    });
    $("#monto").val("");
    $("#currency").val("");
    $("#idCuenta").val("");
    $("#descripcion").val("");
    $("#idAsiento").val("");
}


function setAsientoId(seatId) {
    // Asigna el valor de seatId al campo "ID de Asiento"
    $("#idAsiento").val(seatId);
}



function loadAccounts() {
            const select = document.getElementById("idCuenta");

            // Hacer una solicitud a la API para obtener la lista de clientes
            fetch('https://localhost:7259/api/Account')
                .then(response => response.json())
                .then(data => {
                    // Recorrer los datos y agregar opciones al select
                    data.forEach(customer => {
                        const option = document.createElement("option");
                        option.value = customer.accountId;
                        option.text = customer.accountName;
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error al cargar los clientes:', error);
                });
        }

        function loadAccounts2() {
            const select = document.getElementById("cuentaSelect");

            // Hacer una solicitud a la API para obtener la lista de clientes
            fetch('https://localhost:7259/api/Account')
                .then(response => response.json())
                .then(data => {
                    // Recorrer los datos y agregar opciones al select
                    data.forEach(customer => {
                        const option = document.createElement("option");
                        option.value = customer.accountId;
                        option.text = customer.accountName;
                        select.appendChild(option);
                        
                    });
                })
                .catch(error => {
                    console.error('Error al cargar los clientes:', error);
                });
        }

        // Función para cargar la lista de clientes desde la API
        function loadCustomers() {
            const select = document.getElementById("exampleFormControlSelect");

            // Hacer una solicitud a la API para obtener la lista de clientes
            fetch('https://localhost:7259/api/Customer')
                .then(response => response.json())
                .then(data => {
                    // Recorrer los datos y agregar opciones al select
                    data.forEach(customer => {
                        const option = document.createElement("option");
                        option.value = customer.customerID;
                        option.text = customer.customerName;
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error al cargar los clientes:', error);
                });
        }

        function loadCustomers_Upd() {
            const select = document.getElementById("customer_Upd");

            // Hacer una solicitud a la API para obtener la lista de clientes
            fetch('https://localhost:7259/api/Customer')
                .then(response => response.json())
                .then(data => {
                    // Recorrer los datos y agregar opciones al select
                    data.forEach(customer => {
                        const option = document.createElement("option");
                        option.value = customer.customerID;
                        option.text = customer.customerName;
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error al cargar los clientes:', error);
                });
        }

        

        function loadAccountingSeat() {
            const select = document.getElementById("delete_seat");

            // Hacer una solicitud a la API para obtener la lista de clientes
            fetch('https://localhost:7259/api/AccountingSeat')
                .then(response => response.json())
                .then(data => {
                    // Recorrer los datos y agregar opciones al select
                    data.forEach(customer => {
                        const option = document.createElement("option");
                        option.value = customer.seatId;
                        option.text = customer.reference;
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error al cargar los clientes:', error);
                });
        }

        function loadAccountingSeat_Upd() {
            const select = document.getElementById("update_seat");

            // Hacer una solicitud a la API para obtener la lista de clientes
            fetch('https://localhost:7259/api/AccountingSeat')
                .then(response => response.json())
                .then(data => {
                    // Recorrer los datos y agregar opciones al select
                    data.forEach(customer => {
                        const option = document.createElement("option");
                        option.value = customer.seatId;
                        option.text = customer.reference;
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error al cargar los clientes:', error);
                });
        }

        


        function getCurrentDateInUTCFormat() {
    const now = new Date();
    const year = now.getUTCFullYear();
    const month = String(now.getUTCMonth() + 1).padStart(2, '0');
    const day = String(now.getUTCDate()).padStart(2, '0');
    const hours = String(now.getUTCHours()).padStart(2, '0');
    const minutes = String(now.getUTCMinutes()).padStart(2, '0');
    const seconds = String(now.getUTCSeconds()).padStart(2, '0');

    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
}

        function addSeat() {
    // Obtener los valores de los campos
    var currency_seat = $("#currency").val();
    var customer_seat = $("#exampleFormControlSelect").val();
    var reference_seat = $("#reference").val();
    var fecha = getCurrentDateInUTCFormat();

    // Verificar si algún campo está vacío
    if (currency_seat === "" || customer_seat === "" || reference_seat === "") {
        alert("Todos los campos son obligatorios. Por favor, complete todos los campos.");
        return; // Detener la ejecución si hay campos vacíos
    }

    // Si todas las validaciones pasan, enviar los datos al servidor
    var formData = {
        accountId: 1,
        creationDate: fecha,
        currency: currency_seat,
        seatValue: 001,
        customerId: customer_seat,
        reference: reference_seat
    };

    $.ajax({
        type: "POST",
        contentType: "application/json",
        url: "https://localhost:7259/api/AccountingSeat",
        data: JSON.stringify(formData),
        dataType: "json",
        success: function (data) {
            // Procesar la respuesta si es necesario
            // Puedes mostrar un mensaje de éxito o actualizar la lista de clientes, por ejemplo
            $("#currency").val("");
            $("#seatValue").val("");
            $("#exampleFormControlSelect").val("");
            $("#reference").val("");
            location.reload();
        },
        error: function (error) {
            // Manejar errores si es necesario
            console.log(error);
        }
    });
}


        function loadDataFromAPI() {
    fetch('https://localhost:7259/api/AccountingSeat')
        .then(response => response.json())
        .then(data => {
            const tableBody = document.getElementById('tableBody');

            data.forEach(item => {
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    
                    <td>${item.seatId}</td>
                    <td>${item.creationDate}</td>
                    <td>${item.currency}</td>
                    <td>${item.seatValue}</td>
                    <td>${item.customerId}</td>
                    <td>${item.reference}</td>
                    <td><button type="button" class="btn btn-primary open-modal" data-toggle="modal" data-target="#accountingModal" onclick="setAsientoId(${item.seatId})"">
                        Insertar
                    </button></td>
                `;

                tableBody.appendChild(newRow);
            });
        })
        .catch(error => {
            console.error('Error al cargar datos desde la API:', error);
        });
}

function updateSeat() {
    const select = document.getElementById("update_seat");
    const selectedSeatId = select.value;
    const updatedCurrency = document.getElementById("currency_Upd").value;
    const updatedSeatValue = document.getElementById("seatValue_Upd").value;
    const updatedCustomerId = document.getElementById("customer_Upd").value;
    const updatedReference = document.getElementById("reference_Upd").value;
    var fecha = getCurrentDateInUTCFormat();

    // Validar campos
    if (selectedSeatId === "") {
        alert("Por favor, seleccione un asiento para actualizar.");
        return;
    }

    if (updatedCurrency === "" || updatedSeatValue === "" || updatedCustomerId === "" || updatedReference === "") {
        alert("Todos los campos son obligatorios. Por favor, complete todos los campos.");
        return;
    }

    // Crear un objeto con los datos actualizados
    const updatedData = {
        seatId: selectedSeatId,
        accountId: 1,
        creationDate: fecha,
        currency: updatedCurrency,
        seatValue: updatedSeatValue,
        customerId: updatedCustomerId,
        reference: updatedReference
    };

    // Realizar una solicitud PUT para actualizar el asiento
    $.ajax({
        url: `https://localhost:7259/api/AccountingSeat`,
        type: 'PUT',
        contentType: 'application/json', // Configura el tipo de contenido como JSON
        data: JSON.stringify(updatedData),
        dataType: "json",
        success: function (data) {
            // Asiento editado exitosamente
            alert('Asiento editado con éxito.');
            // Cierra el modal de edición
            location.reload();
        },
        error: function (error) {
            // Ocurrió un error al editar el asiento
            console.error('Error al editar el asiento:', error);
        }
    });
}

        
        // Llamar a la función para cargar los clientes cuando la página se cargue
        document.addEventListener("DOMContentLoaded", function() {
            loadCustomers();
            loadDataFromAPI();
            loadAccountingSeat();
            loadCustomers_Upd();
            loadAccountingSeat_Upd();
            loadAccounts();
            loadAccounts2();
            

            


            const deleteButton = document.getElementById("delete_seat_button");
    deleteButton.addEventListener("click", function () {
        const select = document.getElementById("delete_seat");
        const selectedSeatId = select.value;

        if (!selectedSeatId) {
            alert("Por favor, selecciona un asiento antes de eliminar.");
            return;
        }

        // Realizar una solicitud AJAX para eliminar el asiento seleccionado
        fetch(`https://localhost:7259/api/AccountingSeat/${selectedSeatId}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (response.ok) {
                alert("Asiento eliminado con éxito.");
                // Actualizar la lista de asientos después de la eliminación si es necesario
                location.reload();
            } else {
                alert("Error al eliminar el asiento.");
            }
        })
        .catch(error => {
            console.error("Error al eliminar el asiento:", error);
        });
    });






        const updateSeatSelect = document.getElementById("update_seat");
    const updateModal = document.getElementById("updateModal");

    updateSeatSelect.addEventListener("change", function () {
        // Obtener el ID del asiento seleccionado en el select
        const selectedSeatId = updateSeatSelect.value;

        if (selectedSeatId) {
            // Realizar una solicitud para obtener la información del asiento
            fetch(`https://localhost:7259/api/AccountingSeat/${selectedSeatId}`)
                .then(response => response.json())
                .then(data => {
                    // Rellenar los campos del modal con la información del asiento
                    document.getElementById("currency_Upd").value = data.currency;
                    document.getElementById("seatValue_Upd").value = data.seatValue;
                    document.getElementById("customer_Upd").value = data.customerId;
                    document.getElementById("reference_Upd").value = data.reference;
                })
                .catch(error => {
                    console.error('Error al obtener información del asiento:', error);
                });

            // Mostrar el modal de actualización
            $(updateModal).modal("show");
        }
    });
        });

    </script>  -->



            <!-- Footer -->
            <footer class="footer mt-auto">
                <div class="copyright bg-white">
                    <p>
                        &copy; <span id="copy-year"></span> Copyright RG Advisory Group
                    </p>
                </div>
                <script>
                    var d = new Date();
                    var year = d.getFullYear();
                    document.getElementById("copy-year").innerHTML = year;
                </script>
            </footer>

        </div>

        <script src="~/plugins/jquery/jquery.min.js"></script>
        <script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
        <script src="~/plugins/simplebar/simplebar.min.js"></script>
        <script src="https://unpkg.com/hotkeys-js/dist/hotkeys.min.js"></script>



        <script src="~/plugins/apexcharts/apexcharts.js"></script>



        <script src="~/plugins/DataTables/DataTables-1.10.18/js/jquery.dataTables.min.js"></script>



        <script src="~/plugins/jvectormap/jquery-jvectormap-2.0.3.min.js"></script>
        <script src="~/plugins/jvectormap/jquery-jvectormap-world-mill.js"></script>
        <script src="~/plugins/jvectormap/jquery-jvectormap-us-aea.js"></script>



        <script src="~/plugins/daterangepicker/moment.min.js"></script>
        <script src="~/plugins/daterangepicker/daterangepicker.js"></script>
        <script>
            jQuery(document).ready(function () {
                jQuery('input[name="dateRange"]').daterangepicker({
                    autoUpdateInput: false,
                    singleDatePicker: true,
                    locale: {
                        cancelLabel: 'Clear'
                    }
                });
                jQuery('input[name="dateRange"]').on('apply.daterangepicker', function (ev, picker) {
                    jQuery(this).val(picker.startDate.format('MM/DD/YYYY'));
                });
                jQuery('input[name="dateRange"]').on('cancel.daterangepicker', function (ev, picker) {
                    jQuery(this).val('');
                });
            });
        </script>



        <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>




        <script src="~/js/mono.js"></script>
        <script src="~/js/chart.js"></script>
        <script src="~/js/map.js"></script>
        <script src="~/js/custom.js"></script>





</body>
</html>


